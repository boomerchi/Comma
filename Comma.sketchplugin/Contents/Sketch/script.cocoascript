var toJSArray = function(obj) {
    var l = obj.count
    var r = [];
    for (var i=0; i < l; i++) {
        r.push(obj.objectAtIndex(i))
    }
    return r
}

var selectedLayersOfClass = function(aClass, context){
    var selection = toJSArray(context.document.selectedLayers())
        .map(function(item){
            return item.className() == aClass ? item : null
        })
        .filter(function(item) {
            return item != null
        })
    return NSArray.arrayWithArray(selection)
}

var layers = function(context) {
    var doc = context.document
    var selectedCount = selectedLayersOfClass(MSTextLayer, context).count()
    if (selectedCount == 0) {
        var selectedGroups = flatten(context.selection)
        if (selectedGroups.count() > 0) {
            return selectedGroups
        } else {
            [doc showMessage:'Nothing selected']        
            return [NSArray new] 
        }
    } else {
        return selectedLayersOfClass(MSTextLayer, context)
    }
}

var flatten = function(array) {
    var flatArray = [NSMutableArray new]

    for (var i = 0; i < array.count(); i++) {
        var item = [array objectAtIndex:i]
        if (([item class] == MSLayerGroup || [item class] == MSArtboardGroup) && item.layers().count() > 0) {
            [flatArray addObjectsFromArray:flatten(item.layers())]
        } else if ([item class] == MSSymbolInstance && item.symbolMaster().layers().count() > 0) {
            [flatArray addObjectsFromArray:flatten(item.symbolMaster().layers())]
        } else {
            if ([item class] == MSTextLayer) {
                [flatArray addObject:item]
            }
        }
    }
    return flatArray
}

var moveLayer = function(layer) {
    [layer adjustFrameToFit]
    layer.setIsVisible(false)
    layer.setIsVisible(true)
}

var stringToTitleCase = function(string){
    var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;

    return string.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function(match, index, title) {
        if (index > 0 && index + match.length !== title.length &&
            match.search(smallWords) > -1 && title.charAt(index - 2) !== ':' &&
            (title.charAt(index + match.length) !== '-' || title.charAt(index - 1) === '-') &&
            title.charAt(index - 1).search(/[^\s-]/) < 0) {
            return match.toLowerCase()
        }

        if (match.substr(1).search(/[A-Z]|\../) > -1) {
            return match
        }

        return match.charAt(0).toUpperCase() + match.substr(1)
    })
}

var stringToSentenceCase = function(string) {
    var rg = /(^\s*\w{1}|\.\s*\w{1})/gi
    string = string.replace(rg, function(toReplace) {
        return toReplace.toUpperCase()
    })
    return string
}

var countWords = function(s) {
    s = s.replace(/(^\s*)|(\s*$)/gi,'')
    s = s.replace(/[ ]{2,}/gi,' ')
    s = s.replace(/\n /,'\n')
    return s.split(' ').length
}

var removeDoubleSpaces = function(s) {
    while (s.match('  ')) {
        s = s.replace('  ', ' ')
    }
    return s
}

var removeDoubleBreaks = function(s) {
    while (s.match(/\n\n/)) {
        s = s.replace(/\n\n/, '\n')
    }
    return s
}

var onRun = function(context) {
}

var onCharCount = function(context) {
    var doc = context.document
    layers = layers(context)
    var totalCharacters = 0
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        totalCharacters += string.length()
    }
    [doc showMessage:'Characters: ' + totalCharacters]
}

var onWordCount = function(context) {
    var doc = context.document
    layers = layers(context)
    var totalWords = 0
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        totalWords += countWords(string)
    }
    [doc showMessage:'Words: ' + totalWords]
}

var onRemoveDoubleSpaces = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        item.setStringValue(removeDoubleSpaces(string))
        moveLayer(item)
    }
}

var onSingleSpaceAfterPunctuation = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        string = removeDoubleSpaces(string)
        string = string.replace(/(,) |(\.) |(\?) |(!) |(:) |(;)/g, '$1$2$3$4$5$6')
        item.setStringValue(string.replace(/(,|\.|\?|!|;|:)/g, '$1 '))
        moveLayer(item)
    }
}

var onEllipsis = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        item.setStringValue(string.replace(/\.\.\./g, 'â€¦'))
        moveLayer(item)
    }
}

var onUpperCase = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        [item setStringValue:string.toUpperCase()]
        moveLayer(item)
    }
}

var onLowerCase = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        [item setStringValue:string.toLowerCase()]
        moveLayer(item)
    }
}

var onTitleCase = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue].toLowerCase()
        [item setStringValue:stringToTitleCase(string)]
        moveLayer(item)
    }
}

var onSentenceCase = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue].toLowerCase()
        [item setStringValue:stringToSentenceCase(string)]
        moveLayer(item)
    }
}

var onDoubleLineBreaks = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        string = removeDoubleBreaks(string)
        string = string.replace(/\n\n/g, '\n')
        string = string.replace(/\n/g, '\n\n')
        item.setStringValue(string)
        moveLayer(item)
    }
}

var onSingleLineBreaks = function(context) {
    layers = layers(context)
    for (var i=0; i < [layers count]; i++) {
        var item = [layers objectAtIndex:i]
        var string = [item stringValue]
        string = removeDoubleBreaks(string)
        item.setStringValue(string)
        moveLayer(item)
    }
}
